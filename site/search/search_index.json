{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83c\udf0c The Realm Codex (Unified)","text":"<p>Last updated: 2025-09-22</p>"},{"location":"PHASE4_COMPLETE/","title":"Phase 4: AI Agents Standardization - COMPLETE \u2705","text":"<p>Status: COMPLETE Completion Date: 2025-09-22</p>"},{"location":"PHASE4_COMPLETE/#summary","title":"Summary","text":"<p>Phase 4 successfully standardized AI agent management across the Realm ecosystem with production-grade tooling for specification, deployment, monitoring, and quality assurance.</p>"},{"location":"PHASE4_COMPLETE/#achievements","title":"\ud83c\udfaf Achievements","text":""},{"location":"PHASE4_COMPLETE/#agent-specification-framework","title":"\u2705 Agent Specification Framework","text":"<ul> <li>JSON Schema: <code>schemas/agent.spec.v1.json</code> - Standardized agent specification format</li> <li>Validation System: <code>scripts/agent_registry.py</code> - Automated validation and registry management</li> <li>Version Control: Agent specs now include version tracking and compatibility matrices</li> </ul>"},{"location":"PHASE4_COMPLETE/#enhanced-attribution-metrics","title":"\u2705 Enhanced Attribution &amp; Metrics","text":"<ul> <li>Comprehensive Logging: <code>services/arcanum-orchestrator/src/arcanum/attribution.py</code></li> <li>Structured JSONL format for easy analysis</li> <li>Automatic secret redaction</li> <li>Performance metrics calculation</li> <li>Prometheus Integration: <code>services/arcanum-orchestrator/src/arcanum/agent_metrics.py</code></li> <li>Real-time SLO monitoring</li> <li>Cost tracking and estimation</li> <li>Token usage analytics</li> <li>Custom alerts for SLO violations</li> </ul>"},{"location":"PHASE4_COMPLETE/#canary-deployment-system","title":"\u2705 Canary Deployment System","text":"<ul> <li>Automated Rollouts: <code>scripts/agent_canary.py</code></li> <li>Traffic splitting (configurable percentage)</li> <li>Automatic rollback on SLO violations</li> <li>Duration-based promotion</li> <li>Real-time performance comparison</li> <li>Safety Mechanisms: Error rate thresholds, latency monitoring, minimum sample sizes</li> </ul>"},{"location":"PHASE4_COMPLETE/#quality-gates-framework","title":"\u2705 Quality Gates Framework","text":"<ul> <li>Comprehensive Validation: <code>scripts/agent_quality_gates.py</code></li> <li>Schema compliance checking</li> <li>Performance SLO validation</li> <li>Security requirement verification</li> <li>Cost threshold monitoring</li> <li>Deployment readiness assessment</li> <li>Automated Reports: JSON-formatted quality reports with actionable feedback</li> </ul>"},{"location":"PHASE4_COMPLETE/#operational-integration","title":"\u2705 Operational Integration","text":"<ul> <li>Makefile Commands: Unified interface for all agent operations</li> <li>Prometheus Alerts: Integrated SLO monitoring with alerting</li> <li>Arcanum Service: Enhanced with agent-specific metrics and SLO endpoints</li> </ul>"},{"location":"PHASE4_COMPLETE/#key-components","title":"\ud83d\udd27 Key Components","text":""},{"location":"PHASE4_COMPLETE/#agent-registry","title":"Agent Registry","text":"<pre><code>make agents-list                    # List all agents\nmake agents-validate               # Validate specifications\nmake agents-update-registry        # Update central registry\n</code></pre>"},{"location":"PHASE4_COMPLETE/#quality-gates","title":"Quality Gates","text":"<pre><code>make agents-quality                # Run quality gates for all agents\nmake agents-quality-single AGENT=spirit-researcher\nmake agents-standards              # Show quality standards\n</code></pre>"},{"location":"PHASE4_COMPLETE/#canary-deployments","title":"Canary Deployments","text":"<pre><code>make agents-canary-deploy AGENT=spirit-researcher CONFIG=new_config.yaml\nmake agents-canary-list           # Monitor active deployments\nmake agents-canary-promote ID=abc123def\nmake agents-canary-rollback ID=abc123def\n</code></pre>"},{"location":"PHASE4_COMPLETE/#monitoring-observability","title":"\ud83d\udcca Monitoring &amp; Observability","text":""},{"location":"PHASE4_COMPLETE/#slo-metrics-prometheus","title":"SLO Metrics (Prometheus)","text":"<ul> <li><code>agent_requests_total</code> - Request counts by agent/status</li> <li><code>agent_latency_seconds</code> - Latency histograms</li> <li><code>agent_cost_cents_total</code> - Cost tracking</li> <li><code>agent_slo_violations_total</code> - SLO breach counting</li> </ul>"},{"location":"PHASE4_COMPLETE/#quality-standards","title":"Quality Standards","text":"<ul> <li>Success Rate: \u226595% minimum</li> <li>Latency P95: \u22645000ms maximum</li> <li>Cost Threshold: \u2264100 cents/hour</li> <li>Security: No hardcoded secrets</li> <li>Schema: Full compliance required</li> </ul>"},{"location":"PHASE4_COMPLETE/#alert-rules","title":"Alert Rules","text":"<ul> <li><code>AgentLatencySLOViolation</code> - P95 latency breaches</li> <li><code>AgentSuccessRateSLOViolation</code> - Success rate drops</li> <li><code>AgentCanaryRollbackNeeded</code> - Canary deployment failures</li> <li><code>AgentHighCost</code> - Cost threshold breaches</li> </ul>"},{"location":"PHASE4_COMPLETE/#security-compliance","title":"\ud83d\udd12 Security &amp; Compliance","text":""},{"location":"PHASE4_COMPLETE/#secret-management","title":"Secret Management","text":"<ul> <li>Automatic redaction of sensitive data in logs</li> <li>Environment variable enforcement for API keys</li> <li>Security scanning in quality gates</li> </ul>"},{"location":"PHASE4_COMPLETE/#deployment-safety","title":"Deployment Safety","text":"<ul> <li>Canary deployments with automatic rollback</li> <li>Quality gates preventing unsafe deployments</li> <li>Performance baseline requirements</li> </ul>"},{"location":"PHASE4_COMPLETE/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>/realm-refactor/\n\u251c\u2500\u2500 agents/                         # Agent specifications\n\u251c\u2500\u2500 schemas/agent.spec.v1.json     # Agent schema definition\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 agent_registry.py          # Registry management\n\u2502   \u251c\u2500\u2500 agent_canary.py            # Canary deployments\n\u2502   \u2514\u2500\u2500 agent_quality_gates.py     # Quality validation\n\u251c\u2500\u2500 services/arcanum-orchestrator/\n\u2502   \u2514\u2500\u2500 src/arcanum/\n\u2502       \u251c\u2500\u2500 agent_metrics.py       # Prometheus metrics\n\u2502       \u2514\u2500\u2500 attribution.py         # Enhanced logging\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 deployments/               # Canary deployment configs\n\u2514\u2500\u2500 prometheus/alert_rules.yml     # SLO monitoring alerts\n</code></pre>"},{"location":"PHASE4_COMPLETE/#usage-examples","title":"\ud83d\ude80 Usage Examples","text":""},{"location":"PHASE4_COMPLETE/#deploy-new-agent","title":"Deploy New Agent","text":"<pre><code># 1. Create agent specification\nvim agents/spirit-coder.yaml\n\n# 2. Validate\nmake agents-validate\n\n# 3. Run quality gates\nmake agents-quality-single AGENT=spirit-coder\n\n# 4. Deploy canary (10% traffic)\nmake agents-canary-deploy AGENT=spirit-coder CONFIG=agents/spirit-coder.yaml\n\n# 5. Monitor and promote\nmake agents-canary-list\nmake agents-canary-promote ID=abc123def\n</code></pre>"},{"location":"PHASE4_COMPLETE/#monitor-agent-performance","title":"Monitor Agent Performance","text":"<pre><code># Check SLO status via API\ncurl http://localhost:8000/agents/spirit-researcher/slo\n\n# View metrics in Prometheus\n# http://localhost:9090\n\n# Check Grafana dashboards\n# http://localhost:3000\n</code></pre>"},{"location":"PHASE4_COMPLETE/#integration-points","title":"\ud83d\udd04 Integration Points","text":""},{"location":"PHASE4_COMPLETE/#arcanum-service","title":"Arcanum Service","text":"<ul> <li>Enhanced <code>/invoke</code> endpoint with agent metrics</li> <li>New <code>/agents/{name}/slo</code> endpoint for SLO status</li> <li>Automatic attribution logging for all interactions</li> </ul>"},{"location":"PHASE4_COMPLETE/#prometheusgrafana","title":"Prometheus/Grafana","text":"<ul> <li>Real-time agent performance dashboards</li> <li>SLO compliance tracking</li> <li>Cost and usage analytics</li> </ul>"},{"location":"PHASE4_COMPLETE/#cicd-ready","title":"CI/CD Ready","text":"<ul> <li>Quality gates can be integrated into deployment pipelines</li> <li>Canary deployments support gradual rollouts</li> <li>Automated rollback on failures</li> </ul>"},{"location":"PHASE4_COMPLETE/#next-steps-phase-5-preview","title":"\ud83d\udccb Next Steps (Phase 5 Preview)","text":"<p>Phase 4 provides the foundation for: - Media &amp; Seedbox Hardening (Phase 5) - Automated agent optimization - Multi-environment deployments - Advanced A/B testing frameworks</p> <p>Phase 4 Status: \u2705 COMPLETE All agent standardization objectives achieved with production-grade tooling and monitoring.</p>"},{"location":"chronicle/","title":"Chronicle","text":"<p>Date: 2025-09-22</p>"},{"location":"cosmology_overview/","title":"Cosmology Overview","text":"<p>This document maps mythic names to system roles.</p>"},{"location":"inventory/","title":"System Inventory - Phase 0","text":"<p>Date: 2025-09-22 Status: In Progress</p>"},{"location":"inventory/#running-services","title":"Running Services","text":""},{"location":"inventory/#production-services","title":"Production Services","text":"Service Type Port Status Critical Config Notes arcanum-orchestrator Docker 8080 Running Yes Uses Gemini+Claude APIs, writes to chronicle.md ~~tinfoil-game-server~~ ~~Docker~~ ~~3000~~ REMOVED ~~No~~ Moved to VPS"},{"location":"inventory/#development-services","title":"Development Services","text":"Service Type Port Status Critical Project ~~WhisperingOrchids~~ ~~Node/Vite~~ ~~5179~~ REMOVED ~~No~~ Moved to VPS/GitHub Pages ~~iterm2-theme-editor~~ ~~Node/Vite~~ ~~5173~~ REMOVED ~~No~~ Pruned"},{"location":"inventory/#configuration-details","title":"Configuration Details","text":""},{"location":"inventory/#arcanum-orchestrator-critical-service","title":"Arcanum Orchestrator (Critical Service)","text":"<ul> <li>APIs: Gemini (gemini-1.5-flash), Claude (claude-3-5-sonnet)</li> <li>Data: Chronicle logging to <code>../../docs/chronicle.md</code></li> <li>Schema: <code>schemas/output.default.json</code></li> <li>Secrets: API keys for Google/Anthropic (ENV vars)</li> </ul>"},{"location":"inventory/#tinfoil-game-server","title":"Tinfoil Game Server","text":"<ul> <li>Auth: Username: 10, Password: 2GreenSlugs!</li> <li>Data: Games stored in <code>./games</code> directory</li> <li>Risk: Hardcoded credentials in ENV</li> </ul>"},{"location":"inventory/#infrastructure-components","title":"Infrastructure Components","text":""},{"location":"inventory/#directory-structure","title":"Directory Structure","text":"<ul> <li><code>~/Aetherweave/</code> - DEPRECATED - Contains PAI-* modules</li> <li><code>~/realm-refactor/</code> - New refactor workspace</li> </ul>"},{"location":"inventory/#pai-modules-under-aetherweave-to-migrate","title":"PAI Modules (Under Aetherweave - TO MIGRATE)","text":"<ul> <li>PAI-Agent-Instructions</li> <li>PAI-Archive-Projects</li> <li>PAI-Development-Projects</li> <li>PAI-Documentation-Public</li> <li>PAI-Knowledge-References</li> <li>PAI-Obsidian-Management</li> <li>PAI-Personal-Content-Legacy</li> <li>PAI-Personal-Workspace</li> <li>PAI-System-Infrastructure</li> <li>PAI-VPS-Deployment</li> </ul>"},{"location":"inventory/#dependencies-data-flows","title":"Dependencies &amp; Data Flows","text":""},{"location":"inventory/#external-dependencies","title":"External Dependencies","text":"<ul> <li>Google Gemini API (arcanum-orchestrator)</li> <li>Anthropic Claude API (arcanum-orchestrator)</li> <li>Node.js ecosystem (WhisperingOrchids, iterm2-theme-editor)</li> <li>Docker runtime (production services)</li> </ul>"},{"location":"inventory/#data-flows","title":"Data Flows","text":"<ol> <li>Arcanum: API calls \u2192 Processing \u2192 Chronicle markdown file</li> <li>Tinfoil: Game files \u2192 Local storage in <code>./games</code></li> <li>Dev projects: Hot reload, no persistent data</li> </ol>"},{"location":"inventory/#file-system-dependencies","title":"File System Dependencies","text":"<ul> <li>Arcanum chronicle: <code>../../docs/chronicle.md</code> (relative path - location unclear)</li> <li>Arcanum schema: <code>schemas/output.default.json</code></li> <li>Game data: <code>./games</code> directory</li> <li>Development assets: Local node_modules, build artifacts</li> </ul>"},{"location":"inventory/#immediate-security-risks","title":"Immediate Security Risks","text":"<ul> <li>~~HIGH: Tinfoil server has hardcoded credentials in ENV~~ RESOLVED - Service removed</li> <li>MEDIUM: API keys stored in ENV vars (not externalized)</li> <li>~~LOW: Development servers running on exposed ports~~ RESOLVED - Dev services removed</li> </ul>"},{"location":"inventory/#next-steps-phase-1-prep","title":"Next Steps - Phase 1 Prep","text":"<ol> <li>\u2705 Service inventory complete</li> <li>\u23f3 Establish monitoring baselines</li> <li>\u23f3 Test backup procedures</li> <li>\u23f3 Plan Phase 1 guardrails (health checks, alerts)</li> </ol>"},{"location":"phase1-summary/","title":"Phase 1 Complete: Guardrails First","text":"<p>Date Completed: 2025-09-22 Duration: ~1 hour Status: \u2705 COMPLETE</p>"},{"location":"phase1-summary/#summary","title":"Summary","text":"<p>Successfully implemented Phase 1 guardrails for the critical <code>arcanum-orchestrator</code> service. The system now has proper monitoring, alerting, and safety mechanisms in place.</p>"},{"location":"phase1-summary/#what-we-accomplished","title":"What We Accomplished","text":""},{"location":"phase1-summary/#health-monitoring","title":"\ud83c\udfe5 Health Monitoring","text":"<ul> <li>Health Endpoint: Service already had <code>/healthz</code> and <code>/readyz</code> endpoints</li> <li>Docker Health Checks: Added 30s interval health checks with 3 retries</li> <li>Monitoring Script: <code>scripts/monitor_arcanum.sh</code> for manual/daemon monitoring</li> </ul>"},{"location":"phase1-summary/#alerting-system","title":"\ud83d\udea8 Alerting System","text":"<ul> <li>Alert Manager: <code>scripts/alert_manager.py</code> with configurable notifications</li> <li>Configuration: <code>config/alerts.yaml</code> with extensible notification methods</li> <li>Log-based alerts: Immediate logging, ready for email/Slack integration</li> </ul>"},{"location":"phase1-summary/#safety-guards","title":"\ud83d\udee1\ufe0f Safety Guards","text":"<ul> <li>Resource Limits: 512M memory, 0.5 CPU limits on container</li> <li>Restart Policy: <code>unless-stopped</code> for automatic recovery</li> <li>Config Validation: <code>scripts/validate_config.py</code> validates YAML before deployment</li> </ul>"},{"location":"phase1-summary/#file-structure-created","title":"\ud83d\udcc1 File Structure Created","text":"<pre><code>realm-refactor/\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 inventory.md (system baseline)\n\u2502   \u251c\u2500\u2500 phase1-summary.md (this file)\n\u2502   \u2514\u2500\u2500 refactor/tasks/2025-09-22-*.md\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 monitor_arcanum.sh\n\u2502   \u251c\u2500\u2500 alert_manager.py\n\u2502   \u2514\u2500\u2500 validate_config.py\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 alerts.yaml\n\u2514\u2500\u2500 services/arcanum-orchestrator/\n    \u251c\u2500\u2500 docker-compose.yaml (updated with guardrails)\n    \u2514\u2500\u2500 .env.template\n</code></pre>"},{"location":"phase1-summary/#security-improvements","title":"Security Improvements","text":"<ul> <li>\u2705 Removed tinfoil-game-server (hardcoded credentials)</li> <li>\u2705 Cleaned up unnecessary dev services</li> <li>\u26a0\ufe0f Remaining: API keys still in ENV (Phase 2: Vault integration)</li> </ul>"},{"location":"phase1-summary/#current-system-state","title":"Current System State","text":"<ul> <li>1 Critical Service: arcanum-orchestrator (port 8080)</li> <li>Health Status: \u2705 Healthy with monitoring</li> <li>Docker Status: \u2705 Running with resource limits</li> <li>Alerting: \u2705 Configured and tested</li> </ul>"},{"location":"phase1-summary/#next-steps-phase-2","title":"Next Steps (Phase 2)","text":"<ol> <li>Externalize secrets to Vault/Vaultwarden</li> <li>Implement GitOps deployment pipeline</li> <li>Add container registry and proper CI/CD</li> <li>Set up centralized logging (Loki)</li> <li>Add metrics collection (Prometheus)</li> </ol>"},{"location":"phase1-summary/#commands-for-ongoing-operations","title":"Commands for Ongoing Operations","text":""},{"location":"phase1-summary/#monitor-service-health","title":"Monitor Service Health","text":"<pre><code>cd ~/realm-refactor\n./scripts/monitor_arcanum.sh --once        # Single check\n./scripts/monitor_arcanum.sh --daemon      # Continuous monitoring\n</code></pre>"},{"location":"phase1-summary/#validate-configuration-changes","title":"Validate Configuration Changes","text":"<pre><code>cd ~/realm-refactor\npython3 scripts/validate_config.py config/alerts.yaml\npython3 scripts/validate_config.py services/arcanum-orchestrator/\n</code></pre>"},{"location":"phase1-summary/#check-service-status","title":"Check Service Status","text":"<pre><code>docker ps --filter \"name=arcanum\"\ncurl http://localhost:8080/healthz\n</code></pre> <p>Phase 1 Goals Achieved: \u2705 Guardrails, monitoring, and basic safety measures in place Ready for Phase 2: GitOps &amp; Config Hygiene</p>"},{"location":"phase2-summary/","title":"Phase 2 Complete: GitOps &amp; Config Hygiene","text":"<p>Date Completed: 2025-09-22 Duration: ~1 hour Status: \u2705 COMPLETE</p>"},{"location":"phase2-summary/#summary","title":"Summary","text":"<p>Successfully implemented Phase 2 GitOps and configuration management. The system now has proper secrets management, environment-specific configurations, and pull-based deployment capabilities.</p>"},{"location":"phase2-summary/#what-we-accomplished","title":"What We Accomplished","text":""},{"location":"phase2-summary/#secrets-management","title":"\ud83d\udd10 Secrets Management","text":"<ul> <li>Local Secrets Manager: <code>scripts/secrets_manager.py</code> for secure secret storage</li> <li>Secret Loader: <code>scripts/load_secrets.sh</code> sources secrets into environment</li> <li>Migration Tool: <code>scripts/migrate_to_secrets.py</code> automated the transition</li> <li>Secure Storage: Secrets stored in <code>~/.realm-secrets/</code> with 600 permissions</li> </ul>"},{"location":"phase2-summary/#gitops-implementation","title":"\ud83d\udd04 GitOps Implementation","text":"<ul> <li>Git Repository: Initialized with full version control</li> <li>Environment Configs: Separate configurations for dev/staging/prod</li> <li>Pull-based Deployment: <code>scripts/gitops_deploy.py</code> deploys from config</li> <li>Config Validation: Integrated validation in deployment pipeline</li> </ul>"},{"location":"phase2-summary/#infrastructure-as-code","title":"\ud83c\udfd7\ufe0f Infrastructure as Code","text":"<ul> <li>Environment Separation: <code>/config/environments/{dev,staging,prod}/</code></li> <li>Service Definitions: YAML-based service configurations</li> <li>Resource Management: Environment-specific resource limits</li> <li>Health Check Config: Configurable health check parameters</li> </ul>"},{"location":"phase2-summary/#new-file-structure","title":"\ud83d\udcc1 New File Structure","text":"<pre><code>realm-refactor/\n\u251c\u2500\u2500 config/\n\u2502   \u2514\u2500\u2500 environments/\n\u2502       \u251c\u2500\u2500 dev/arcanum.yaml\n\u2502       \u2514\u2500\u2500 prod/arcanum.yaml\n\u251c\u2500\u2500 scripts/\n\u2502   \u251c\u2500\u2500 secrets_manager.py\n\u2502   \u251c\u2500\u2500 load_secrets.sh\n\u2502   \u251c\u2500\u2500 migrate_to_secrets.py\n\u2502   \u2514\u2500\u2500 gitops_deploy.py\n\u251c\u2500\u2500 services/\n\u2502   \u2514\u2500\u2500 vaultwarden/\n\u2502       \u251c\u2500\u2500 docker-compose.yaml\n\u2502       \u2514\u2500\u2500 .env.template\n\u2514\u2500\u2500 .git/ (version control)\n</code></pre>"},{"location":"phase2-summary/#key-features-implemented","title":"Key Features Implemented","text":""},{"location":"phase2-summary/#environment-specific-deployment","title":"Environment-Specific Deployment","text":"<pre><code># Deploy to development\npython3 scripts/gitops_deploy.py dev arcanum\n\n# Deploy to production\npython3 scripts/gitops_deploy.py prod arcanum\n</code></pre>"},{"location":"phase2-summary/#secrets-management_1","title":"Secrets Management","text":"<pre><code># Store a secret\npython3 scripts/secrets_manager.py store api_key \"sk-...\"\n\n# Retrieve a secret\npython3 scripts/secrets_manager.py get api_key\n\n# List all secrets\npython3 scripts/secrets_manager.py list\n</code></pre>"},{"location":"phase2-summary/#configuration-management","title":"Configuration Management","text":"<ul> <li>Environment-specific resource limits</li> <li>Different health check intervals</li> <li>Feature flags (debug mode, logging)</li> <li>Model configuration per environment</li> </ul>"},{"location":"phase2-summary/#security-improvements","title":"Security Improvements","text":"<ul> <li>\u2705 Secrets externalized from environment variables</li> <li>\u2705 Secure file storage with proper permissions</li> <li>\u2705 Environment separation prevents config leakage</li> <li>\u2705 Version control tracks all configuration changes</li> </ul>"},{"location":"phase2-summary/#current-system-state","title":"Current System State","text":"<ul> <li>Git Repository: Initialized with full history</li> <li>Deployment Method: GitOps with config validation</li> <li>Secrets: Managed locally with secure storage</li> <li>Environments: Dev and prod configurations ready</li> </ul>"},{"location":"phase2-summary/#deployment-commands","title":"Deployment Commands","text":""},{"location":"phase2-summary/#gitops-deployment","title":"GitOps Deployment","text":"<pre><code># Deploy service with environment-specific config\ncd ~/realm-refactor\npython3 scripts/gitops_deploy.py dev arcanum\n\n# Validate configuration before deploy\npython3 scripts/validate_config.py config/environments/dev/arcanum.yaml\n</code></pre>"},{"location":"phase2-summary/#secrets-management_2","title":"Secrets Management","text":"<pre><code># Load secrets for manual deployment\nsource scripts/load_secrets.sh\n\n# Check deployment health\ncurl http://localhost:8080/healthz\n</code></pre>"},{"location":"phase2-summary/#next-steps-phase-3","title":"Next Steps (Phase 3)","text":"<ol> <li>Set up centralized logging (Loki)</li> <li>Implement metrics collection (Prometheus)</li> <li>Create monitoring dashboards (Grafana)</li> <li>Add automated remediation scripts</li> <li>Implement anomaly detection gates</li> </ol> <p>Phase 2 Goals Achieved: \u2705 GitOps, secrets management, environment separation Ready for Phase 3: Observability &amp; Self-Healing</p>"},{"location":"phase3-summary/","title":"Phase 3 Complete: Observability &amp; Self-Healing","text":"<p>Date Completed: 2025-09-22 Duration: ~1.5 hours Status: \u2705 COMPLETE</p>"},{"location":"phase3-summary/#summary","title":"Summary","text":"<p>Successfully implemented Phase 3 observability and self-healing capabilities. The system now has comprehensive monitoring, centralized logging, automated alerting, and self-remediation mechanisms.</p>"},{"location":"phase3-summary/#what-we-accomplished","title":"What We Accomplished","text":""},{"location":"phase3-summary/#comprehensive-observability-stack","title":"\ud83d\udcca Comprehensive Observability Stack","text":"<ul> <li>Prometheus: Metrics collection with 15s scrape interval</li> <li>Loki: Centralized logging with 7-day retention</li> <li>Grafana: Dashboards with real-time visualization</li> <li>Promtail: Log aggregation from Docker containers</li> <li>AlertManager: Alert routing and notification management</li> </ul>"},{"location":"phase3-summary/#advanced-monitoring-alerting","title":"\ud83d\udea8 Advanced Monitoring &amp; Alerting","text":"<ul> <li>Service Health Monitoring: Up/down status tracking</li> <li>Performance Metrics: Request rates, error rates, resource usage</li> <li>Alert Rules: 8 different alert conditions covering critical scenarios</li> <li>Rate Limiting: Prevents alert spam and remediation loops</li> </ul>"},{"location":"phase3-summary/#self-healing-capabilities","title":"\ud83d\udd27 Self-Healing Capabilities","text":"<ul> <li>Automated Service Restart: Triggers on service downtime</li> <li>Resource Management: Scales down on resource exhaustion</li> <li>Log Management: Cleanup mechanisms for disk space</li> <li>Rate-Limited Actions: Prevents runaway remediation</li> </ul>"},{"location":"phase3-summary/#new-infrastructure-components","title":"\ud83d\udcc1 New Infrastructure Components","text":"<pre><code>realm-refactor/\n\u251c\u2500\u2500 docker-compose.yml (full observability stack)\n\u251c\u2500\u2500 prometheus/\n\u2502   \u251c\u2500\u2500 prometheus.yml (scrape configs)\n\u2502   \u2514\u2500\u2500 alert_rules.yml (8 alert rules)\n\u251c\u2500\u2500 loki/\n\u2502   \u251c\u2500\u2500 loki-config.yaml\n\u2502   \u2514\u2500\u2500 promtail-config.yaml\n\u251c\u2500\u2500 alertmanager/\n\u2502   \u2514\u2500\u2500 config.yml\n\u251c\u2500\u2500 grafana/\n\u2502   \u251c\u2500\u2500 dashboards/realm-observability.json\n\u2502   \u2514\u2500\u2500 provisioning/datasources/ (Prometheus + Loki)\n\u2514\u2500\u2500 scripts/\n    \u2514\u2500\u2500 self_healing.py (automated remediation)\n</code></pre>"},{"location":"phase3-summary/#key-features-implemented","title":"\ud83c\udfaf Key Features Implemented","text":""},{"location":"phase3-summary/#real-time-monitoring","title":"Real-Time Monitoring","text":"<ul> <li>Service Status: Live health check monitoring</li> <li>Request Metrics: Rate, latency, error tracking</li> <li>Resource Usage: Memory, CPU, container health</li> <li>Log Streaming: Real-time log aggregation and search</li> </ul>"},{"location":"phase3-summary/#automated-remediation","title":"Automated Remediation","text":"<ul> <li>Service Recovery: Automatic restart on failure (rate-limited)</li> <li>Resource Scaling: Automatic scale-down on resource pressure</li> <li>Log Cleanup: Disk space management</li> <li>Alert Integration: Actions triggered by specific alert conditions</li> </ul>"},{"location":"phase3-summary/#dashboard-visualization","title":"Dashboard &amp; Visualization","text":"<ul> <li>Real-Time Status: Service up/down indicators</li> <li>Request Analytics: Request rate graphs and trends</li> <li>Active Alerts: Live alert status table</li> <li>Log Viewer: Searchable, real-time log display</li> <li>Self-Healing Actions: Remediation action tracking</li> </ul>"},{"location":"phase3-summary/#monitoring-endpoints","title":"\ud83d\udcc8 Monitoring Endpoints","text":""},{"location":"phase3-summary/#service-access-points","title":"Service Access Points","text":"<ul> <li>Prometheus: http://localhost:9090 (metrics &amp; alerts)</li> <li>Grafana: http://localhost:3000 (admin/admin)</li> <li>Loki: http://localhost:3100 (log API)</li> <li>AlertManager: http://localhost:9093 (alert management)</li> </ul>"},{"location":"phase3-summary/#key-metrics-available","title":"Key Metrics Available","text":"<ul> <li><code>up{job=\"arcanum\"}</code> - Service availability</li> <li><code>arcanum_requests_total</code> - Request counters by provider/status</li> <li><code>container_memory_usage_bytes</code> - Memory usage</li> <li>Docker container logs via Loki</li> </ul>"},{"location":"phase3-summary/#self-healing-operations","title":"\ud83e\udd16 Self-Healing Operations","text":""},{"location":"phase3-summary/#automated-actions","title":"Automated Actions","text":"<pre><code># Run self-healing check once\npython3 scripts/self_healing.py\n\n# Run in daemon mode (checks every 60s)\npython3 scripts/self_healing.py --daemon\n\n# Custom check interval\npython3 scripts/self_healing.py --daemon 30\n</code></pre>"},{"location":"phase3-summary/#alert-conditions-triggering-remediation","title":"Alert Conditions Triggering Remediation","text":"<ul> <li>ArcanumNeedsRestart: Service down for 30s \u2192 Automatic restart</li> <li>SystemResourceExhaustion: Memory &gt; 95% \u2192 Scale down</li> <li>HighDiskUsage: Disk space low \u2192 Log cleanup</li> </ul>"},{"location":"phase3-summary/#rate-limiting","title":"Rate Limiting","text":"<ul> <li>Maximum 3 remediation actions per service per hour</li> <li>Prevents remediation loops and system instability</li> <li>All actions logged for audit and debugging</li> </ul>"},{"location":"phase3-summary/#system-health-dashboard","title":"\ud83d\udd0d System Health Dashboard","text":"<p>The Realm Observability Dashboard provides: - \ud83c\udfaf Real-time service status indicators - \ud83d\udcca Request rate and error tracking graphs - \ud83d\udea8 Live active alerts table - \ud83d\udcdd Real-time log streaming and search - \ud83d\udd27 Self-healing action audit trail - \ud83d\udcbe Resource usage monitoring</p>"},{"location":"phase3-summary/#next-steps-phase-4","title":"Next Steps (Phase 4)","text":"<ol> <li>AI Agents Standardization</li> <li>Agent spec definitions and attribution logs</li> <li>Canary deployment mechanisms</li> <li>SLO-based alerting and auto-scaling</li> <li>Cross-service dependency mapping</li> </ol> <p>Phase 3 Goals Achieved: \u2705 Complete observability, automated monitoring, self-healing Ready for Phase 4: AI Agents Standardization</p>"},{"location":"apps/","title":"Apps of the Realm","text":""},{"location":"bestiary/claude/","title":"Claude \u2014 Oracle of Clarity","text":"<p>Summoning: <code>spirit-claude</code></p>"},{"location":"bestiary/codex/","title":"CodeX \u2014 Forge Sprite","text":"<p>Summoning: <code>spirit-codex</code></p>"},{"location":"bestiary/gemini/","title":"Gemini \u2014 Twin Muse","text":"<p>Summoning: <code>spirit-gemini</code></p>"},{"location":"bestiary/local/","title":"House Spirits \u2014 Local LLMs","text":"<p>Summoning: <code>spirit-local-llama</code></p>"},{"location":"framework/core-philosophy/","title":"Core Philosophy","text":"<ul> <li>Automate the common, guard the rare.</li> <li>Everything observable, everything logged.</li> <li>Gates protect high-impact change.</li> </ul>"},{"location":"framework/modularity/","title":"Modularity","text":""},{"location":"framework/refactor/","title":"Refactor Program","text":""},{"location":"framework/system-map/","title":"System Map","text":"<pre><code>[ Devices ] -&gt; [ Communication ] -&gt; [ VPS Hub ] -&gt; [ Panopticon ]\n</code></pre>"},{"location":"grimoire/","title":"Grimoire","text":""},{"location":"lore/cosmology/","title":"Cosmology","text":"<p>The oracle, sanctum, scriptorium, forge, menagerie, conclave, and arcanum shape the Realm.</p>"},{"location":"lore/naming-rites/","title":"Naming Rites","text":"<p>Realm: elysium \u2014 Envs: dev=dawn, stg=dusk, prod=zenith \u2014 Region: usw</p>"},{"location":"lore/rituals/","title":"Rituals (Runbooks)","text":""},{"location":"refactor/checklist-template/","title":"Refactor Checklist (Template)","text":"<p>Service/Subsystem: Owner: Env(s): dev/stg/prod Date: </p>"},{"location":"refactor/checklist-template/#dod","title":"DoD","text":"<ul> <li> Containerized with health check and limits</li> <li> Logs \u2192 Loki, metrics \u2192 Prometheus, alerts defined</li> <li> Config &amp; secrets externalized (Vault/Vaultwarden)</li> <li> GitOps pipeline (+ staging + canary + rollback)</li> <li> Runbook updated in MkDocs</li> <li> Ops Journal entry added</li> </ul>"},{"location":"refactor/checklist-template/#risks-mitigation","title":"Risks &amp; Mitigation","text":"<ul> <li> Rollback plan</li> <li> Backup verified before change</li> <li> Approvals for irreversible actions</li> </ul>"},{"location":"refactor/checklist-template/#notes","title":"Notes","text":"<ul> <li>...</li> </ul>"},{"location":"refactor/milestones/","title":"Refactor Milestones","text":"<ul> <li>M1 \u2014 Foundations: Guardrails, gates, monitoring</li> <li>M2 \u2014 Deployment Hygiene: GitOps pipelines live</li> <li>M3 \u2014 Observability Upgrade: Dashboards + auto-remediation</li> <li>M4 \u2014 Agent Consistency: Agent specs + SLOs</li> <li>M5 \u2014 Media Stability: Seedbox gates + integrity</li> <li>M6 \u2014 Lean Realm: Decommission legacy; Mac mini integrated</li> </ul>"},{"location":"refactor/overview/","title":"Refactor Program Overview","text":"<p>A pragmatic, low-risk plan to migrate the realm to modular, self-healing, well-documented systems.</p> <p>Updated: 2025-09-22</p>"},{"location":"refactor/overview/#objectives","title":"Objectives","text":"<ul> <li>Reduce tech debt and snowflake configs</li> <li>Standardize GitOps deployment</li> <li>Strengthen observability and automated remediation</li> <li>Align agents (Claude/CodeX/Gemini/local) to a common spec</li> <li>Keep the realm operational with gates and canaries</li> </ul> <p>See: <code>docs/refactor/phases.md</code>, <code>docs/refactor/checklist-template.md</code>, <code>docs/refactor/milestones.md</code>.</p>"},{"location":"refactor/phases/","title":"Refactor Phases","text":""},{"location":"refactor/phases/#phase-0-inventory-baselines","title":"Phase 0 \u2014 Inventory &amp; Baselines","text":"<ul> <li>Asset map, dependencies, SLO baselines, backup restore test</li> </ul>"},{"location":"refactor/phases/#phase-1-guardrails-first","title":"Phase 1 \u2014 Guardrails First","text":"<ul> <li>Health checks, alerts, YAML gates, chat approvals</li> </ul>"},{"location":"refactor/phases/#phase-2-gitops-config-hygiene","title":"Phase 2 \u2014 GitOps &amp; Config Hygiene","text":"<ul> <li>Containerize services, Vault/Vaultwarden for secrets, pull-based deploys</li> </ul>"},{"location":"refactor/phases/#phase-3-observability-self-healing","title":"Phase 3 \u2014 Observability &amp; Self-Healing","text":"<ul> <li>Metrics/logs/dashboards, remediation scripts, anomaly gates</li> </ul>"},{"location":"refactor/phases/#phase-4-ai-agents-standardization","title":"Phase 4 \u2014 AI Agents Standardization","text":"<ul> <li>Agent specs, attribution logs, canary + SLO alarms</li> </ul>"},{"location":"refactor/phases/#phase-5-media-seedbox-hardening","title":"Phase 5 \u2014 Media &amp; Seedbox Hardening","text":"<ul> <li>rclone with checksums, quotas and pruning gates, provenance scans</li> </ul>"},{"location":"refactor/phases/#phase-6-de-risk-decommission","title":"Phase 6 \u2014 De-risk &amp; Decommission","text":"<ul> <li>Retire dead cron/scripts, onboard Mac mini worker, reduce surface area</li> </ul>"},{"location":"refactor/tasks/2025-09-22-ai-agents/","title":"Phase 4 AI Agents Standardization","text":"<p>Service/Subsystem: ai-agents Date: 2025-09-22</p>"},{"location":"refactor/tasks/2025-09-22-ai-agents/#dod-phase-4-ai-agents-standardization","title":"DoD (Phase 4 - AI Agents Standardization)","text":"<ul> <li> Agent specification schema (capabilities, models, SLOs)</li> <li> Attribution logging for all AI interactions</li> <li> Canary deployment system for agent updates</li> <li> SLO monitoring per agent type (latency, accuracy, cost)</li> <li> Agent registry with version management</li> <li> Cross-agent compatibility framework</li> <li> Quality gates for agent deployments</li> </ul>"},{"location":"refactor/tasks/2025-09-22-ai-agents/#plan","title":"Plan","text":"<ol> <li>Design agent specification schema (YAML-based)</li> <li>Enhance arcanum service with attribution logging</li> <li>Create agent registry and version management</li> <li>Implement canary deployment for agent configs</li> <li>Add agent-specific SLO monitoring</li> <li>Create agent quality gates and testing framework</li> <li>Standardize Claude/Gemini/local agent interfaces</li> </ol>"},{"location":"refactor/tasks/2025-09-22-ai-agents/#risk-rollback","title":"Risk &amp; Rollback","text":"<ul> <li>Risk: Agent behavior changes affecting user experience</li> <li>Rollback: Version-controlled agent configs with instant rollback</li> <li>Mitigation: Canary deployments with automatic rollback on SLO violations</li> </ul>"},{"location":"refactor/tasks/2025-09-22-ai-agents/#links","title":"Links","text":"<ul> <li>Issue: </li> <li>PR: </li> <li>Dashboard: </li> </ul>"},{"location":"refactor/tasks/2025-09-22-arcanum-orchestrator/","title":"Phase 1 Guardrails - Health Checks and Alerts","text":"<p>Service/Subsystem: arcanum-orchestrator Date: 2025-09-22</p>"},{"location":"refactor/tasks/2025-09-22-arcanum-orchestrator/#dod-phase-1-guardrails-first","title":"DoD (Phase 1 - Guardrails First)","text":"<ul> <li> Add health check endpoint to arcanum service (/healthz endpoint exists)</li> <li> Configure Docker container limits and restart policy (512M memory, 0.5 CPU limit)</li> <li> Set up basic monitoring (uptime, response time) (monitor_arcanum.sh)</li> <li> Create simple alerting (email/notification on failure) (alert_manager.py)</li> <li> Add configuration validation gates (validate_config.py)</li> <li> Document rollback procedure (see Risk &amp; Rollback section)</li> </ul>"},{"location":"refactor/tasks/2025-09-22-arcanum-orchestrator/#plan","title":"Plan","text":"<ol> <li>Add <code>/health</code> endpoint to arcanum service</li> <li>Update Docker compose with health checks and limits</li> <li>Create monitoring script to check service status</li> <li>Set up notification system for failures</li> <li>Add YAML validation for config changes</li> <li>Test failure scenarios and recovery</li> </ol>"},{"location":"refactor/tasks/2025-09-22-arcanum-orchestrator/#risk-rollback","title":"Risk &amp; Rollback","text":"<ul> <li>Risk: Service restart during health check implementation</li> <li>Rollback: Keep current Docker image, revert compose changes</li> <li>Mitigation: Test changes in non-production first</li> </ul>"},{"location":"refactor/tasks/2025-09-22-arcanum-orchestrator/#links","title":"Links","text":"<ul> <li>Issue: </li> <li>PR: </li> <li>Dashboard: </li> </ul>"},{"location":"refactor/tasks/2025-09-22-observability/","title":"Phase 3 Observability and Self-Healing","text":"<p>Service/Subsystem: observability Date: 2025-09-22</p>"},{"location":"refactor/tasks/2025-09-22-observability/#dod-phase-3-observability-self-healing","title":"DoD (Phase 3 - Observability &amp; Self-Healing)","text":"<ul> <li> Centralized logging with Loki (deployed and configured)</li> <li> Metrics collection with Prometheus (scraping arcanum service)</li> <li> Monitoring dashboards with Grafana (realm-observability dashboard)</li> <li> Log aggregation from all services (Promtail collecting Docker logs)</li> <li> Automated remediation scripts for common issues (self_healing.py)</li> <li> Anomaly detection and alerting (Prometheus alert rules)</li> <li> Self-healing mechanisms (restart, scale, rollback capabilities)</li> </ul>"},{"location":"refactor/tasks/2025-09-22-observability/#plan","title":"Plan","text":"<ol> <li>Set up Prometheus for metrics collection</li> <li>Configure Loki for centralized logging</li> <li>Deploy Grafana with pre-built dashboards</li> <li>Integrate arcanum service with observability stack</li> <li>Create automated remediation scripts</li> <li>Implement anomaly detection gates</li> <li>Test self-healing scenarios</li> </ol>"},{"location":"refactor/tasks/2025-09-22-observability/#risk-rollback","title":"Risk &amp; Rollback","text":"<ul> <li>Risk: Observability stack resource usage</li> <li>Rollback: Keep existing monitoring scripts as backup</li> <li>Mitigation: Start with lightweight configs, scale gradually</li> </ul>"},{"location":"refactor/tasks/2025-09-22-observability/#links","title":"Links","text":"<ul> <li>Issue: </li> <li>PR: </li> <li>Dashboard: </li> </ul>"},{"location":"refactor/tasks/2025-09-22-system-wide/","title":"Phase 2 GitOps and Config Hygiene","text":"<p>Service/Subsystem: system-wide Date: 2025-09-22</p>"},{"location":"refactor/tasks/2025-09-22-system-wide/#dod-phase-2-gitops-config-hygiene","title":"DoD (Phase 2 - GitOps &amp; Config Hygiene)","text":"<ul> <li> Secrets externalized to local secrets manager</li> <li> API keys removed from Docker environment (load_secrets.sh)</li> <li> Git repository for configuration management (initialized with commit)</li> <li> Pull-based deployment mechanism (gitops_deploy.py)</li> <li> Environment-specific configs (dev/staging/prod)</li> <li> Config validation in deployment pipeline</li> </ul>"},{"location":"refactor/tasks/2025-09-22-system-wide/#plan","title":"Plan","text":"<ol> <li>Set up Vaultwarden for secrets management</li> <li>Extract API keys from arcanum service to Vault</li> <li>Create Git-based config management structure</li> <li>Implement simple GitOps deployment script</li> <li>Add environment separation (dev/prod configs)</li> <li>Integrate config validation into deployment</li> </ol>"},{"location":"refactor/tasks/2025-09-22-system-wide/#risk-rollback","title":"Risk &amp; Rollback","text":"<ul> <li>Risk: Service downtime during secret migration</li> <li>Rollback: Keep current .env approach as backup</li> <li>Mitigation: Test Vault integration locally first</li> </ul>"},{"location":"refactor/tasks/2025-09-22-system-wide/#links","title":"Links","text":"<ul> <li>Issue: </li> <li>PR: </li> <li>Dashboard: </li> </ul>"},{"location":"runbooks/docs_pipeline_runbook/","title":"Runbook: Documentation &amp; Realm Lore Pipeline","text":"<p>Purpose: Keep the Realm Codex (MkDocs site) always current, integrating Chronicle entries, realm lore, and refactor docs, with clear gates for modification.</p>"},{"location":"runbooks/docs_pipeline_runbook/#1-local-live-docs","title":"1. Local \"Live Docs\"","text":""},{"location":"runbooks/docs_pipeline_runbook/#start-dev-server","title":"Start Dev Server","text":"<p>From repo root: <pre><code>pip install mkdocs-material pyyaml\nmkdocs serve -a 0.0.0.0:8000\n</code></pre></p> <p>\u2192 Browse at http://localhost:8000 MkDocs auto-reloads on any change under <code>docs/</code>.</p>"},{"location":"runbooks/docs_pipeline_runbook/#chronicle-appends","title":"Chronicle Appends","text":"<ul> <li>Arcanum can append to <code>docs/chronicle.md</code> when <code>ARCANUM_APPEND_JOURNAL=true</code> in <code>.env</code>.</li> <li>With <code>mkdocs serve</code> running, those entries appear live in the Chronicle page.</li> </ul>"},{"location":"runbooks/docs_pipeline_runbook/#2-remote-publishing-github-pages","title":"2. Remote Publishing (GitHub Pages)","text":""},{"location":"runbooks/docs_pipeline_runbook/#workflow","title":"Workflow","text":"<p><code>.github/workflows/docs.yml</code>: <pre><code>name: Publish Docs\non:\n  push:\n    branches: [ main ]\n    paths:\n      - 'docs/**'\n      - 'mkdocs.yml'\npermissions:\n  contents: read\n  pages: write\n  id-token: write\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: actions/setup-python@v5\n        with: { python-version: '3.x' }\n      - run: pip install mkdocs-material\n      - run: mkdocs build --strict\n      - uses: actions/upload-pages-artifact@v3\n        with: { path: 'site' }\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n    environment:\n      name: github-pages\n      url: ${{ steps.deployment.outputs.page_url }}\n    steps:\n      - id: deployment\n        uses: actions/deploy-pages@v4\n</code></pre></p>"},{"location":"runbooks/docs_pipeline_runbook/#github-config","title":"GitHub Config","text":"<ul> <li>Repo \u2192 Settings \u2192 Pages \u2192 Source \u2192 GitHub Actions.</li> <li>Push to <code>main</code> with changes under <code>docs/</code> \u2192 workflow builds &amp; publishes.</li> </ul>"},{"location":"runbooks/docs_pipeline_runbook/#3-realm-lore-structure","title":"3. Realm Lore Structure","text":""},{"location":"runbooks/docs_pipeline_runbook/#mkdocsyml-nav-block","title":"<code>mkdocs.yml</code> nav block:","text":"<pre><code>site_name: Realm Codex\ntheme:\n  name: material\nnav:\n  - Home: index.md\n  - Realm Lore:\n      - Overview: lore/overview.md\n      - Naming: lore/naming.md\n      - Spirits (Agents): lore/spirits.md\n      - Rites (Runbooks): lore/rites.md\n      - Chronicle (Ops Journal): chronicle.md\n  - Runbooks:\n      - Arcanum Orchestrator: runbooks/ai-orchestrator.md\n      - Documentation Pipeline: runbooks/docs-pipeline.md\n</code></pre>"},{"location":"runbooks/docs_pipeline_runbook/#folder-layout","title":"Folder Layout","text":"<pre><code>docs/\n  index.md\n  chronicle.md\n  lore/\n    overview.md\n    naming.md\n    spirits.md\n    rites.md\n  runbooks/\n    ai-orchestrator.md\n    docs-pipeline.md\n</code></pre>"},{"location":"runbooks/docs_pipeline_runbook/#4-collaboration-safety","title":"4. Collaboration &amp; Safety","text":""},{"location":"runbooks/docs_pipeline_runbook/#rules-for-agents-claude-gemini-others","title":"Rules for Agents (Claude, Gemini, others)","text":"<ol> <li>Do not overwrite <code>docs/chronicle.md</code> manually. </li> <li>Chronicle entries are appended automatically via Arcanum or issue-close workflow.  </li> <li> <p>Manual edits must preserve existing front matter + history.</p> </li> <li> <p>Realm lore (<code>docs/lore/*</code>) evolves narratively. </p> </li> <li> <p>Gemini/Claude may propose edits, but changes must:</p> <ul> <li>Retain symbolic alignment with realm functions.</li> <li>Include metadata attribution.</li> </ul> </li> <li> <p>Runbooks (<code>docs/runbooks/*</code>) are gated. </p> </li> <li>Any PR changing <code>services/</code> must also update or create the corresponding runbook.  </li> <li> <p>Pre-commit + CI enforce metadata + attribution.</p> </li> <li> <p>Publishing is via GitHub Pages workflow only. </p> </li> <li>Agents must not bypass with custom deploys.  </li> <li>If workflow changes are proposed, they require human review.</li> </ol>"},{"location":"runbooks/docs_pipeline_runbook/#5-verification","title":"5. Verification","text":"<ul> <li>Local: </li> <li><code>mkdocs serve</code> reloads when <code>docs/</code> changes.  </li> <li> <p>New Chronicle entry visible in browser within seconds.</p> </li> <li> <p>Remote: </p> </li> <li>Push \u2192 GitHub Action runs \u2192 site updates at Pages URL.  </li> <li>Verify via Action logs + updated public site.</li> </ul>"},{"location":"runbooks/docs_pipeline_runbook/#6-handoff-protocol","title":"6. Handoff Protocol","text":"<p>When an agent proposes a change to Realm documentation:</p> <ul> <li>Provide diff (<code>git diff</code>)  </li> <li>State intent: add lore, update runbook, refine nav, etc.  </li> <li>Confirm metadata present (<code>docs_metadata_lint.py</code>).  </li> <li>Include provenance in JSON message.</li> </ul> <p>Example Arcanum handoff (to Claude): <pre><code>{\n  \"provider\":\"claude\",\n  \"message\":{\n    \"task\":\"summarize runbook changes\",\n    \"inputs\":{\"diff\":\"&lt;patch&gt;\"},\n    \"constraints\":{\"json_only\":true,\"max_tokens\":256},\n    \"provenance\":[{\"source\":\"docs/runbooks/docs-pipeline.md\",\"why\":\"runbook update\"}],\n    \"expected\":\"output.default\",\n    \"return\":\"json\"\n  }\n}\n</code></pre></p> <p>Attribution - Author: Archon - Source: Runbook drafting session - Description: Documenting docs/lore pipeline for safe agent collaboration</p>"},{"location":"runbooks/oracle-api/","title":"oracle/api","text":"<p>Operations reference for the Oracle API module.</p>"},{"location":"sanctum/","title":"Sanctum","text":""},{"location":"standards/naming-conventions/","title":"Naming Conventions","text":""}]}